-- 2) Usuarios
select * from usuarios
CREATE TABLE usuarios
(
    id_usuario SERIAL PRIMARY KEY,
    nombre1 VARCHAR(70) NOT NULL,
    nombre2 VARCHAR(70),
    apellido1 VARCHAR(70) NOT NULL,
    apellido2 VARCHAR(70),
    telefono BIGINT,
    dpi BIGINT,
    correo VARCHAR(100) NOT NULL UNIQUE,
    usuario_clave VARCHAR(150) NOT NULL,
    token VARCHAR(150),
    fecha_creacion DATETIME
    YEAR TO SECOND DEFAULT CURRENT YEAR TO SECOND,
    fecha_clave DATETIME YEAR TO SECOND DEFAULT CURRENT YEAR TO SECOND,
    fotografia VARCHAR (255),
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1)),
    rol VARCHAR (20) DEFAULT 'cliente' CHECK (rol IN ('cliente','empleado','administrador'))
);

-- 3) Intermedia usuario_rol 
CREATE TABLE usuario_rol (
  id_usuario_rol SERIAL PRIMARY KEY,
  id_usuario INTEGER NOT NULL,
  id_rol INTEGER NOT NULL,
  descripcion VARCHAR(255),
  fecha_creacion DATETIME YEAR TO SECOND DEFAULT CURRENT YEAR TO SECOND,
  situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1)),
  FOREIGN KEY (id_usuario) REFERENCES usuarios (id_usuario),
  FOREIGN KEY (id_rol) REFERENCES roles (id_rol)
);

-- 4) Tabla de clientes (enlaza con usuarios)
CREATE TABLE clientes (
    id_cliente SERIAL PRIMARY KEY,
    id_usuario INTEGER NOT NULL UNIQUE,
    fecha_registro DATETIME YEAR TO SECOND  DEFAULT CURRENT YEAR TO SECOND,
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1)),
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);

-- 5) Configuración de clientes
CREATE TABLE clientes_configuracion (
    id_config SERIAL PRIMARY KEY,
    id_cliente INTEGER  NOT NULL  UNIQUE,
    
    -- DIRECCIÓN PRINCIPAL
    direccion_principal VARCHAR(250),
    ciudad VARCHAR(100),
    estado VARCHAR(100),
    codigo_postal VARCHAR(10),
    pais VARCHAR(50) DEFAULT 'Guatemala',
    telefono_contacto VARCHAR(20),
    
    -- JSON / CLOB para Informix
    direcciones_adicionales CLOB,
    metodos_pago CLOB,
    
    -- PREFERENCIAS
    notificaciones_email SMALLINT DEFAULT 1 CHECK (notificaciones_email IN (0,1)),
    notificaciones_sms SMALLINT DEFAULT 0 CHECK (notificaciones_sms IN (0,1)),
    newsletter SMALLINT DEFAULT 1 CHECK (newsletter IN (0,1)),
    idioma VARCHAR(5) DEFAULT 'es',
    moneda VARCHAR(3) DEFAULT 'GTQ',
    
    -- FECHAS
    fecha_creacion DATETIME YEAR TO SECOND DEFAULT CURRENT YEAR TO SECOND,
    fecha_modificacion DATETIME YEAR TO SECOND DEFAULT CURRENT YEAR TO SECOND,
    
    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)
);

-- ALTER TABLE clientes_configuracion DROP perfil_publico;
-- ALTER TABLE clientes_configuracion DROP mostrar_compras;


-- 6) Tabla de empleados (enlaza con usuarios)
CREATE TABLE empleados (
    id_empleado SERIAL PRIMARY KEY,
    id_usuario INTEGER NOT NULL UNIQUE,
    departamento VARCHAR(100),
    puesto VARCHAR(100),
    fecha_ingreso DATETIME YEAR TO SECOND  DEFAULT CURRENT YEAR TO SECOND,
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1)),
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);

--7) Configuración de empleados
CREATE TABLE empleados_configuracion (
    id_config SERIAL PRIMARY KEY,
    id_empleado INTEGER NOT NULL  UNIQUE,
    
    -- PREFERENCIAS
    notificaciones_email SMALLINT DEFAULT 1 CHECK (notificaciones_email IN (0,1)),
    notificaciones_sms SMALLINT DEFAULT 0 CHECK (notificaciones_sms   IN (0,1)),
    idioma VARCHAR(5) DEFAULT 'es',
    tema_preferido VARCHAR(20) DEFAULT 'claro',
    
    -- FECHAS
    fecha_creacion DATETIME YEAR TO SECOND  DEFAULT CURRENT YEAR TO SECOND,
    fecha_modificacion DATETIME YEAR TO SECOND  DEFAULT CURRENT YEAR TO SECOND,
    
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado)
);

-- 8) Marcas
SELECT * FROM marcas
CREATE TABLE marcas (
    id_marca SERIAL PRIMARY KEY,
    marca_nombre VARCHAR(50) NOT NULL UNIQUE,
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1))
);

-- 9) Celulares (inventario)
SELECT * FROM celulares
CREATE TABLE celulares (
    id_celular SERIAL PRIMARY KEY,
    id_marca INTEGER NOT NULL,
    modelo VARCHAR(100) NOT NULL,
    descripcion VARCHAR(255),
    precio_compra DECIMAL(10,2) DEFAULT 0.00,
    precio_venta DECIMAL(10,2) NOT NULL,
    cantidad INTEGER DEFAULT 0,
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1)),
    FOREIGN KEY (id_marca) REFERENCES marcas(id_marca)
);

-- 10) Tipo de servicio
CREATE TABLE tipo_servicio (
    id_tipo_servicio SERIAL PRIMARY KEY,
    descripcion VARCHAR(100) NOT NULL UNIQUE,
    costo_base DECIMAL(10,2) NOT NULL,
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1))
);

-- 11) Reparaciones (cliente → usuarios / empleado)
CREATE TABLE reparaciones (
    id_reparacion SERIAL PRIMARY KEY,
    id_cliente INTEGER NOT NULL,
    id_celular INTEGER NOT NULL,
    id_tipo_servicio INTEGER NOT NULL,
    id_empleado_asignado INTEGER NOT NULL,
    motivo VARCHAR(255) NOT NULL,
    fecha_ingreso DATETIME YEAR TO SECOND DEFAULT CURRENT YEAR TO SECOND,
    fecha_entrega DATETIME YEAR TO SECOND,
    costo_servicio DECIMAL(10,2) DEFAULT 0.00,
    estado VARCHAR(20) DEFAULT 'Ingresado' CHECK (estado IN ('Ingresado','En Proceso','Terminado','Entregado')),
    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente),
    FOREIGN KEY (id_celular) REFERENCES celulares(id_celular),
    FOREIGN KEY (id_tipo_servicio) REFERENCES tipo_servicio(id_tipo_servicio),
    FOREIGN KEY (id_empleado_asignado) REFERENCES empleados(id_empleado)
);

-- 12) Ventas (empleado vendedor → cliente)
CREATE TABLE ventas (
    id_venta SERIAL PRIMARY KEY,
    id_empleado_vendedor INTEGER NOT NULL,
    id_cliente INTEGER NOT NULL,
    fecha_venta DATETIME YEAR TO SECOND  DEFAULT CURRENT YEAR TO SECOND,
    tipo CHAR(1) DEFAULT 'C' CHECK (tipo IN ('C','R')),
    total DECIMAL(12,2) NOT NULL,
    situacion SMALLINT DEFAULT 1 CHECK (situacion IN (0,1)),
    FOREIGN KEY (id_empleado_vendedor) REFERENCES empleados(id_empleado),
    FOREIGN KEY (id_cliente) REFERENCES clientes(id_cliente)
);

-- 13) Detalle de venta
CREATE TABLE detalle_ventas (
    id_detalle SERIAL PRIMARY KEY,
    id_venta INTEGER NOT NULL,
    id_celular INTEGER DEFAULT NULL,
    id_reparacion INTEGER DEFAULT NULL,
    cantidad INTEGER DEFAULT 1,
    precio_unitario DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (id_venta) REFERENCES ventas(id_venta),
    FOREIGN KEY (id_celular) REFERENCES celulares(id_celular),
    FOREIGN KEY (id_reparacion) REFERENCES reparaciones(id_reparacion),
    CHECK ((id_celular IS NOT NULL AND id_reparacion IS NULL) OR (id_celular IS NULL AND id_reparacion IS NOT NULL))
);
